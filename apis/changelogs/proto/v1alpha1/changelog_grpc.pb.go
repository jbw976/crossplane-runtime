//
//Copyright 2024 The Crossplane Authors.
//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//http://www.apache.org/licenses/LICENSE-2.0
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: changelogs/proto/v1alpha1/changelog.proto

// buf:lint:ignore PACKAGE_DIRECTORY_MATCH

package v1alpha1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ChangeLogService_SendChangeLog_FullMethodName = "/changelogs.proto.v1alpha1.ChangeLogService/SendChangeLog"
)

// ChangeLogServiceClient is the client API for ChangeLogService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ChangeLogServiceClient interface {
	// SendChangeLog sends a change log entry to the change log service.
	SendChangeLog(ctx context.Context, opts ...grpc.CallOption) (ChangeLogService_SendChangeLogClient, error)
}

type changeLogServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewChangeLogServiceClient(cc grpc.ClientConnInterface) ChangeLogServiceClient {
	return &changeLogServiceClient{cc}
}

func (c *changeLogServiceClient) SendChangeLog(ctx context.Context, opts ...grpc.CallOption) (ChangeLogService_SendChangeLogClient, error) {
	stream, err := c.cc.NewStream(ctx, &ChangeLogService_ServiceDesc.Streams[0], ChangeLogService_SendChangeLog_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &changeLogServiceSendChangeLogClient{stream}
	return x, nil
}

type ChangeLogService_SendChangeLogClient interface {
	Send(*SendChangeLogRequest) error
	CloseAndRecv() (*SendChangeLogResponse, error)
	grpc.ClientStream
}

type changeLogServiceSendChangeLogClient struct {
	grpc.ClientStream
}

func (x *changeLogServiceSendChangeLogClient) Send(m *SendChangeLogRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *changeLogServiceSendChangeLogClient) CloseAndRecv() (*SendChangeLogResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(SendChangeLogResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ChangeLogServiceServer is the server API for ChangeLogService service.
// All implementations must embed UnimplementedChangeLogServiceServer
// for forward compatibility
type ChangeLogServiceServer interface {
	// SendChangeLog sends a change log entry to the change log service.
	SendChangeLog(ChangeLogService_SendChangeLogServer) error
	mustEmbedUnimplementedChangeLogServiceServer()
}

// UnimplementedChangeLogServiceServer must be embedded to have forward compatible implementations.
type UnimplementedChangeLogServiceServer struct {
}

func (UnimplementedChangeLogServiceServer) SendChangeLog(ChangeLogService_SendChangeLogServer) error {
	return status.Errorf(codes.Unimplemented, "method SendChangeLog not implemented")
}
func (UnimplementedChangeLogServiceServer) mustEmbedUnimplementedChangeLogServiceServer() {}

// UnsafeChangeLogServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChangeLogServiceServer will
// result in compilation errors.
type UnsafeChangeLogServiceServer interface {
	mustEmbedUnimplementedChangeLogServiceServer()
}

func RegisterChangeLogServiceServer(s grpc.ServiceRegistrar, srv ChangeLogServiceServer) {
	s.RegisterService(&ChangeLogService_ServiceDesc, srv)
}

func _ChangeLogService_SendChangeLog_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ChangeLogServiceServer).SendChangeLog(&changeLogServiceSendChangeLogServer{stream})
}

type ChangeLogService_SendChangeLogServer interface {
	SendAndClose(*SendChangeLogResponse) error
	Recv() (*SendChangeLogRequest, error)
	grpc.ServerStream
}

type changeLogServiceSendChangeLogServer struct {
	grpc.ServerStream
}

func (x *changeLogServiceSendChangeLogServer) SendAndClose(m *SendChangeLogResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *changeLogServiceSendChangeLogServer) Recv() (*SendChangeLogRequest, error) {
	m := new(SendChangeLogRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ChangeLogService_ServiceDesc is the grpc.ServiceDesc for ChangeLogService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ChangeLogService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "changelogs.proto.v1alpha1.ChangeLogService",
	HandlerType: (*ChangeLogServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SendChangeLog",
			Handler:       _ChangeLogService_SendChangeLog_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "changelogs/proto/v1alpha1/changelog.proto",
}
